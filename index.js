// index.js
require('dotenv').config();

const Parser      = require('rss-parser');
const TelegramBot = require('node-telegram-bot-api');
const cron        = require('node-cron');
const OpenAI      = require('openai');

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
const BOT_TOKEN      = process.env.BOT_TOKEN;
const CHANNEL_ID     = process.env.CHANNEL_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const CRON_SCHEDULE  = process.env.CRON_SCHEDULE || '0 9 * * *';    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
const DIGEST_HOURS   = Number(process.env.DIGEST_HOURS) || 24;      // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á
const FALLBACK_IMAGE = 'https://placehold.co/800x400?text=Frontend+Digest';

// –õ–æ–≥–∏ ENV
console.log('‚úÖ ENV:', {
  BOT_TOKEN: !!BOT_TOKEN,
  CHANNEL_ID: !!CHANNEL_ID,
  OPENAI:    !!OPENAI_API_KEY,
  CRON:      CRON_SCHEDULE,
  HOURS:     DIGEST_HOURS
});

// –°–ø–∏—Å–æ–∫ RSS-–ª–µ–Ω—Ç
const feeds = [
  { name: 'Smashing Magazine',        url: 'https://www.smashingmagazine.com/feed/' },
  { name: 'CSS-Tricks',               url: 'https://css-tricks.com/feed/' },
  { name: 'Dev.to (frontend)',        url: 'https://dev.to/feed/frontend' },
  { name: 'Frontend Focus',           url: 'https://frontendfoc.us/rss' },
  { name: 'A List Apart',             url: 'https://alistapart.com/feed/' },
  { name: 'SitePoint (Front End)',    url: 'https://www.sitepoint.com/front-end/feed/' },
  { name: 'JavaScript Weekly',        url: 'https://javascriptweekly.com/rss/' },
  { name: 'CSS Weekly',               url: 'https://css-weekly.com/feed/' },
  { name: 'HTML5 Weekly',             url: 'https://html5weekly.com/rss.xml' },
  { name: 'React Status',             url: 'https://react.statuscode.com/rss' },
  { name: 'Vue.js News',              url: 'https://news.vuejs.org/rss.xml' },
  { name: 'Angular Blog',             url: 'https://blog.angular.io/feed.xml' },
  { name: 'TypeScript Weekly',        url: 'https://www.typescriptweekly.com/rss.xml' },
  { name: 'Reddit r/frontend',        url: 'https://www.reddit.com/r/frontend/.rss' },
  { name: 'Hacker News (Front Page)', url: 'https://hnrss.org/frontpage' },
  { name: 'Medium (Frontend Tag)',    url: 'https://medium.com/feed/tag/frontend' }
];

const parser = new Parser();
const bot    = new TelegramBot(BOT_TOKEN, { polling: false });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏: –∑–∞ DIGEST_HOURS —á–∞—Å–æ–≤
function isFresh(pubDate) {
  return (new Date() - new Date(pubDate)) <= DIGEST_HOURS * 3600_000;
}

// –ü–µ—Ä–µ–≤–æ–¥ –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –º–æ–¥–µ–ª–∏ gpt-4o-mini
async function translateAndSummarize(text, maxTokens = 150) {
  const prompt = `
–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏–∑–ª–æ–∂–∏ —Å—É—Ç—å —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
"${text}"
`;
  try {
    const res = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: maxTokens,
      temperature: 0.3
    });
    return res.choices[0].message.content.trim() || text;
  } catch (err) {
    console.warn('‚ö†Ô∏è OpenAI error:', err.code || err.message);
    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
    try {
      const tr = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: `–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n"${text}"` }],
        max_tokens: maxTokens,
        temperature: 0.0
      });
      return tr.choices[0].message.content.trim() || text;
    } catch {
      return text;
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏
async function generateCover(dateStr) {
  const prompt = `
–°–æ–∑–¥–∞–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ–±–ª–æ–∂–∫—É-–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ ${dateStr}.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–∫–æ–Ω–∫–∏ HTML, CSS, JS –∏ –±—Ä–∞—É–∑–µ—Ä–∞.
`;
  try {
    const img = await openai.images.generate({
      prompt: prompt.trim(),
      n: 1,
      size: '800x400'
    });
    return img.data[0].url;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏:', err.message);
    return FALLBACK_IMAGE;
  }
}

// –°–±–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞
async function buildDigest() {
  const dateStr = new Date().toISOString().slice(0,10);
  const header  = `üì∞ *–§—Ä–æ–Ω—Ç–µ–Ω–¥-–¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ ${dateStr}*\n`;
  const lines   = [header];

  for (let { name, url } of feeds) {
    let feed;
    try {
      feed = await parser.parseURL(url);
    } catch (e) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${name}:`, e.message);
      continue;
    }
    const items = feed.items
      .filter(i => i.pubDate && isFresh(i.pubDate))
      .slice(0, 3);

    if (!items.length) continue;
    lines.push(`üîπ *${name}*`);

    for (let item of items) {
      const fullText = `${item.title}${item.contentSnippet ? ' ‚Äî ' + item.contentSnippet : ''}`;
      const result   = await translateAndSummarize(fullText, 100);
      // –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Å—É—Ç—å
      const [headline, ...rest] = result.split('\n');
      lines.push(`‚Ä¢ [${headline.trim()}](${item.link})`);
      if (rest.length) {
        lines.push(`  –ö—Ä–∞—Ç–∫–æ: ${rest.join(' ').trim()}`);
      }
    }
    lines.push('');  // —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  }

  return lines.length > 1 ? lines.join('\n') : null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async function sendDigest() {
  const dateStr = new Date().toISOString().slice(0,10);
  const cover   = await generateCover(dateStr);
  await bot.sendPhoto(CHANNEL_ID, cover, {
    caption: `üì∞ *–§—Ä–æ–Ω—Ç–µ–Ω–¥-–¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ ${dateStr}*`,
    parse_mode: 'Markdown'
  });

  const text = await buildDigest();
  if (text) {
    await bot.sendMessage(CHANNEL_ID, text, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    });
  } else {
    console.log('–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥', DIGEST_HOURS, '—á.');
  }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
cron.schedule(CRON_SCHEDULE, () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', CRON_SCHEDULE);
  sendDigest();
});

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if (process.argv.includes('--run-now')) {
  sendDigest();
}
