// index.js
require('dotenv').config();

const Parser      = require('rss-parser');
const TelegramBot = require('node-telegram-bot-api');
const cron        = require('node-cron');
const OpenAI      = require('openai');

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
const BOT_TOKEN      = process.env.BOT_TOKEN;
const CHANNEL_ID     = process.env.CHANNEL_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const CRON_SCHEDULE  = process.env.CRON_SCHEDULE || '0 9 * * *'; // –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
const DIGEST_HOURS   = Number(process.env.DIGEST_HOURS) || 24;

console.log('‚úÖ ENV:', {
  BOT_TOKEN: !!BOT_TOKEN,
  CHANNEL_ID: !!CHANNEL_ID,
  OPENAI:    !!OPENAI_API_KEY,
  CRON:      CRON_SCHEDULE,
  HOURS:     DIGEST_HOURS
});

const feeds = [
  { name: 'Smashing Magazine',        url: 'https://www.smashingmagazine.com/feed/' },
  { name: 'CSS-Tricks',               url: 'https://css-tricks.com/feed/' },
  { name: 'Dev.to (frontend)',        url: 'https://dev.to/feed/frontend' },
  { name: 'Frontend Focus',           url: 'https://frontendfoc.us/rss' },
  { name: 'A List Apart',             url: 'https://alistapart.com/feed/' },
  { name: 'SitePoint (Front End)',    url: 'https://www.sitepoint.com/front-end/feed/' },
  { name: 'JavaScript Weekly',        url: 'https://javascriptweekly.com/rss/' },
  { name: 'CSS Weekly',               url: 'https://css-weekly.com/feed/' },
  { name: 'HTML5 Weekly',             url: 'https://html5weekly.com/rss.xml' },
  { name: 'React Status',             url: 'https://react.statuscode.com/rss' },
  { name: 'Vue.js News',              url: 'https://news.vuejs.org/rss.xml' },
  { name: 'Angular Blog',             url: 'https://blog.angular.io/feed.xml' },
  { name: 'TypeScript Weekly',        url: 'https://www.typescriptweekly.com/rss.xml' },
  { name: 'Reddit r/frontend',        url: 'https://www.reddit.com/r/frontend/.rss' },
  { name: 'Hacker News (Front Page)', url: 'https://hnrss.org/frontpage' },
  { name: 'Medium (Frontend Tag)',    url: 'https://medium.com/feed/tag/frontend' }
];

const parser = new Parser();
const bot    = new TelegramBot(BOT_TOKEN, { polling: false });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏: –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ DIGEST_HOURS —á–∞—Å–æ–≤
function isFresh(pubDate) {
  return (new Date() - new Date(pubDate)) <= DIGEST_HOURS * 3600_000;
}

// –ö—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò
async function summarizeRussian(text, maxTokens = 100) {
  const prompt = `
–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª–∏–≤ —Å—É—Ç—å:
"${text}"
`;
  const res = await openai.chat.completions.create({
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: maxTokens,
    temperature: 0.3
  });
  return res.choices[0].message.content.trim();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ —á–µ—Ä–µ–∑ DALL¬∑E
async function generateCover(dateStr) {
  const prompt = `
–°–æ–∑–¥–∞–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∏–∫–æ–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ–±–ª–æ–∂–∫—É –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∑–∞ ${dateStr}.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–ª–µ–º–µ–Ω—Ç—ã HTML, CSS, JS –∏ –∏–∫–æ–Ω–∫—É –±—Ä–∞—É–∑–µ—Ä–∞, –≤ –º—è–≥–∫–∏—Ö —Ç–æ–Ω–∞—Ö.
`;
  const res = await openai.images.generate({
    prompt: prompt.trim(),
    size: '800x400',
    n: 1
  });
  return res.data[0].url;
}

// –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–π–¥–∂–µ—Å—Ç
async function buildDigest() {
  const now     = new Date();
  const dateStr = now.toISOString().slice(0,10); // YYYY-MM-DD
  const header  = `üì∞ *–î–∞–π–¥–∂–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ ${dateStr}*\n`;
  const lines   = [header];

  for (let { name, url } of feeds) {
    let feed;
    try {
      feed = await parser.parseURL(url);
    } catch (e) {
      console.error(`–ù–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å ${name}:`, e.message);
      continue;
    }

    const items = feed.items
      .filter(i => i.pubDate && isFresh(i.pubDate))
      .slice(0, 3);

    if (!items.length) continue;
    lines.push(`üîπ *${name}*`);

    for (let item of items) {
      // —Ä–µ–∑—é–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–Ω–∏–ø–ø–µ—Ç–∞
      const titleSum   = await summarizeRussian(item.title, 50);
      const snippet    = item.contentSnippet || '';
      const snippetSum = snippet ? await summarizeRussian(snippet, 80) : '';

      lines.push(`‚Ä¢ ${titleSum}`);
      if (snippetSum) lines.push(`  _${snippetSum}_`);
      lines.push(`  ‚ñ∂ [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é](${item.link})\n`);
    }
  }

  return lines.length > 1 ? lines.join('\n') : null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–ª–æ–∂–∫–∏ –∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async function sendDigest() {
  const now     = new Date();
  const dateStr = now.toISOString().slice(0,10);
  // 1) –û–±–ª–æ–∂–∫–∞
  let coverUrl;
  try {
    coverUrl = await generateCover(dateStr);
    await bot.sendPhoto(CHANNEL_ID, coverUrl, {
      caption: `üì∞ *–§—Ä–æ–Ω—Ç–µ–Ω–¥-–¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ ${dateStr}*`,
      parse_mode: 'Markdown'
    });
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É:', e.message);
  }
  // 2) –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
  const text = await buildDigest();
  if (!text) {
    console.log('–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥', DIGEST_HOURS, '—á.');
    return;
  }
  await bot.sendMessage(CHANNEL_ID, text, {
    parse_mode: 'Markdown',
    disable_web_page_preview: true
  });
  console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç:', new Date().toISOString());
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
cron.schedule(CRON_SCHEDULE, () => {
  console.log('–ó–∞–ø—É—Å–∫ sendDigest() –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', CRON_SCHEDULE);
  sendDigest();
});

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if (process.argv.includes('--run-now')) {
  sendDigest();
}
