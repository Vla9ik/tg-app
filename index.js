// index.js
require('dotenv').config();
const Parser         = require('rss-parser');
const TelegramBot    = require('node-telegram-bot-api');
const cron           = require('node-cron');
const { Configuration, OpenAIApi } = require('openai');

const parser = new Parser();

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

// –¢–æ–∫–µ–Ω—ã (–ª—É—á—à–µ –≤—ã–Ω–æ—Å–∏—Ç—å –≤ env / .env, –Ω–æ –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
const BOT_TOKEN      = process.env.BOT_TOKEN;
const CHANNEL_ID     = process.env.CHANNEL_ID;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const CRON_SCHEDULE  = process.env.CRON_SCHEDULE || '*/05 * * * *';
const DIGEST_HOURS   = Number(process.env.DIGEST_HOURS) || 24;


// RSS-–ª–µ–Ω—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ç–µ–º–∞—Ç–∏–∫–∏
const feeds = [
  { name: 'Smashing Magazine',        url: 'https://www.smashingmagazine.com/feed/' },
  { name: 'CSS-Tricks',               url: 'https://css-tricks.com/feed/' },
  { name: 'Dev.to (frontend)',        url: 'https://dev.to/feed/frontend' },
  { name: 'Frontend Focus',           url: 'https://frontendfoc.us/rss' },
  { name: 'A List Apart',             url: 'https://alistapart.com/feed/' },
  { name: 'SitePoint (Front End)',    url: 'https://www.sitepoint.com/front-end/feed/' },
  { name: 'JavaScript Weekly',        url: 'https://javascriptweekly.com/rss/' },
  { name: 'CSS Weekly',               url: 'https://css-weekly.com/feed/' },
  { name: 'HTML5 Weekly',             url: 'https://html5weekly.com/rss.xml' },
  { name: 'React Status',             url: 'https://react.statuscode.com/rss' },
  { name: 'Vue.js News',              url: 'https://news.vuejs.org/rss.xml' },
  { name: 'Angular Blog',             url: 'https://blog.angular.io/feed.xml' },
  { name: 'TypeScript Weekly',        url: 'https://www.typescriptweekly.com/rss.xml' },
  { name: 'Reddit r/frontend',        url: 'https://www.reddit.com/r/frontend/.rss' },
  { name: 'Hacker News (Front Page)', url: 'https://hnrss.org/frontpage' },
  { name: 'Medium (Frontend Tag)',    url: 'https://medium.com/feed/tag/frontend' }
];


// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
const bot    = new TelegramBot(BOT_TOKEN, { polling: false });
const openai = new OpenAIApi(new Configuration({ apiKey: OPENAI_API_KEY }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: –∑–∞ DIGEST_HOURS —á–∞—Å–æ–≤
function isFresh(pubDate) {
  return (new Date() - new Date(pubDate)) <= DIGEST_HOURS * 60 * 60 * 1000;
}

// –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ OpenAI
async function translateToRussian(text) {
  const res = await openai.createChatCompletion({
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: `–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n\n${text}` }],
    max_tokens: 200,
    temperature: 0.2
  });
  return res.data.choices[0].message.content.trim();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async function buildDigest() {
  const now     = new Date();
  const dateStr = now.toISOString().slice(0,16).replace('T',' ');
  let lines     = [`üì∞ *–î–∞–π–¥–∂–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${DIGEST_HOURS}—á (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ ${dateStr})*\n`];

  for (let { name, url } of feeds) {
    try {
      const feed  = await parser.parseURL(url);
      const items = feed.items
        .filter(i => i.pubDate && isFresh(i.pubDate))
        .slice(0,3);  // –±–µ—Ä—ë–º –¥–æ 3 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

      if (!items.length) continue;

      lines.push(`üîπ *${name}*`);
      for (let i of items) {
        const titleRu = await translateToRussian(i.title);
        lines.push(`‚Ä¢ ${titleRu} ‚Äî [—á–∏—Ç–∞—Ç—å](${i.link})`);
      }
      lines.push('');
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${name}:`, e.message);
    }
  }

  return lines.length > 1 ? lines.join('\n') : null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
async function sendDigest() {
  const digest = await buildDigest();
  if (!digest) {
    console.log('–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥', DIGEST_HOURS, '—á.');
    return;
  }
  await bot.sendMessage(CHANNEL_ID, digest, {
    parse_mode: 'Markdown',
    disable_web_page_preview: true
  });
  console.log('–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', CRON_SCHEDULE, new Date().toISOString());
}

// –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
cron.schedule(CRON_SCHEDULE, sendDigest);

// –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π `node index.js`
if (process.argv.includes('--run-now')) {
  sendDigest();
}
